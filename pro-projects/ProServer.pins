; Sun Oct 23 21:00:04 MSK 2016
; 
;+ (version "3.5")
;+ (build "Build 663")

([ProServer_Class0] of  CloProgram

	(cloFunctions
		[ProServer_Class2]
		[ProServer_Class100011])
	(cloNamespace [ProServer_Class1])
	(title "Clojure Work"))

([ProServer_Class1] of  CloNamespace

	(source "(:use protege.core)\n(:import clojuretab.ClojureTab)")
	(title "menu.item"))

([ProServer_Class10000] of  CloProgram

	(cloFunctions
		[ProServer_Class10011]
		[ProServer_Class10010]
		[ProServer_Class10012]
		[ProServer_Class50000]
		[ProServer_Class60003]
		[ProServer_Class50003]
		[ProServer_Class50004]
		[ProServer_Class60000]
		[ProServer_Class60001]
		[ProServer_Class20002]
		[ProServer_Class20000]
		[ProServer_Class20001])
	(cloNamespace [ProServer_Class10001])
	(cloVars
		[ProServer_Class10003]
		[ProServer_Class10004]
		[ProServer_Class10005]
		[ProServer_Class10006]
		[ProServer_Class10007]
		[ProServer_Class10008]
		[ProServer_Class10009]
		[ProServer_Class50002]
		[ProServer_Class70008]
		[ProServer_Class70009])
	(documentation [ProServer_Class10002])
	(title "Boat Movement"))

([ProServer_Class100000] of  CloFunction

	(source ";;(println [:MANEUVER params])\n(let [crd (:coord params)\n       crd [(read-string (get crd \"0\"))\n              (read-string (get crd \"1\"))]]\n  (vswap! BOAT assoc\n	:coord crd\n	:turn-coord crd\n	:course (:course params)\n	:speed (:speed params))\n  (pump-in-mvr))\n{:status 204}")
	(title "maneuver [params]"))

([ProServer_Class100001] of  CloVar

	(source "(volatile! {:id \"b1\"})")
	(title "BOAT"))

([ProServer_Class100004] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"astern\")\n(Island title ?tit side \"ASTERN\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsAstern_Isl"))

([ProServer_Class100005] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject ?sub\n	((not= ?sub \"behind the island\")\n	 (not= ?sub \"before the island\")))")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc ?sub))")
	(salience -1)
	(title "as:AnswerIslandsOnSide"))

([ProServer_Class100008] of  CloNamespace

	(source "(:use protege.core)")
	(title "as"))

([ProServer_Class10001] of  CloNamespace

	(source "(:require\n  [geo.calc :as geo]\n  [async.proc :as ap])")
	(title "boat.mov"))

([ProServer_Class100011] of  CloFunction

	(source "(System/currentTimeMillis)")
	(title "current-time []"))

([ProServer_Class10002] of  CloDocumentation

	(source "All boats data:\n\nBOATS - { id1 <boat_data1> ... }\n\nBoat data:\n\n{:coord [lat<lat-degrees-float> lon <lon-degrees-float>] \n :course <crs-degrees-int> \n :speed <spd-knots-int>\n :helm <:steady/:port/:hard-a-port/:starboard/:hard-a-starboard>\n :engine <target speed-knots-int (negative = reverse)>\n :time-from-turn <msec> \n :turn-coord [lat lon]}}\n\nBoat constants:\n\nCRS-STP - step of normal course update\nCRS-HRD - step of hard course update\n\nSPD-STP - step of speed update\nSPD-MAX - max speed (positive)\nSPD-MIN - min speed (negative)\n\nBOAT-TIO - timeout interval of boat data update\n\nAPI:\n\nstart-boats-movement [f] ;; (f <boat_data>)- func of sending mees when\n                                          ;; speed or course changing\n(boat-add id coord crs spd f) ;; or boat adding\n(boat-rem id f)                       ;;  or removing\n(boat-helm id cmd) ;; cmd=<:steady/:starboard/:hard-starboard/:port/:hard-port>\n(boat-engine id knots) ;; knots-int\n(coord id)\n(speed id)\n(course id)"))

([ProServer_Class10003] of  CloVar

	(source "(defonce BOATS (volatile! {}))")
	(title "DEF-BOATS"))

([ProServer_Class10004] of  CloVar

	(source "6")
	(title "CRS-STP"))

([ProServer_Class10005] of  CloVar

	(source "18")
	(title "CRS-HRD"))

([ProServer_Class10006] of  CloVar

	(source "0.6")
	(title "SPD-STP"))

([ProServer_Class10007] of  CloVar

	(source "44")
	(title "SPD-MAX"))

([ProServer_Class10008] of  CloVar

	(source "-8")
	(title "SPD-MIN"))

([ProServer_Class10009] of  CloVar

	(source "1000")
	(title "BOAT-TIO"))

([ProServer_Class10010] of  CloFunction

	(source "(let [cp (fn [crs] (if (>= crs 360) (- crs 360) crs))\n       cm (fn [crs] (if (< crs 0) (+ crs 360) crs))\n       old (:course bdt)\n       tgt (:helm bdt)]\n  (if (not= tgt :steady)\n    (let [nbd (assoc bdt \n                    :course (condp = tgt\n                                  :starboard (cp (+ old CRS-STP))\n                                  :hard-a-starboard (cp (+ old CRS-HRD))\n                                  :port (cm (- old CRS-STP))\n                                  :hard-a-port (cm (- old CRS-HRD))\n                                  bdt)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)\n    bdt))")
	(title "helm [bdt f]"))

([ProServer_Class10011] of  CloFunction

	(source "(let [old (:speed bdt)\n       tgt (:engine bdt)\n       new (cond\n                (> tgt old) (+ old SPD-STP)\n                (< tgt old) (- old SPD-STP)\n                true 0)]\n  (if (= new 0)\n    bdt\n    (let [nbd (assoc bdt \n                    :speed (if (or (and (< old tgt) (>= new tgt))\n                                         (and (> old tgt) (<= new tgt)))\n                                 tgt\n                                 new)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)))")
	(title "engine [bdt f]"))

([ProServer_Class10012] of  CloFunction

	(source "(let [etim (+ (:time-from-turn bdt) BOAT-TIO)\n       ehrs (/ etim 36000000)]\n  (assoc bdt :coord (geo/future-pos (:turn-coord bdt) (:course bdt) (:speed bdt) ehrs)\n                    :time-from-turn etim))")
	(title "move [bdt]"))

([ProServer_Class110000] of  StartPoint

	(coord 62.4444 5.88)
	(title "Geiranger Entrance"))

([ProServer_Class110002] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"before the island\"\n	object ?tit1)\n(Island sector ?sec\n	title ?tit1\n	polar ?pol1)\n(Island sector ?sec\n	title ?tit2\n	polar ?pol2\n	(> (second ?pol1)\n	    (second ?pol2)))")
	(rhs "(vswap! ?acc conj [?tit2 (second ?pol2)])")
	(salience 0)
	(title "as:IslandsBefore"))

([ProServer_Class110003] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject \"before the island\"\n	object ?tit)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc \n    (str \"before the island \" ?tit)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerIslandsBefore"))

([ProServer_Class110004] of  CloFunction

	(source "(println \"Chart client connected..\")\n(vswap! BOAT assoc \n	:chart true\n	:coord (map-center)\n	:course 0)\n(pump-in-evt \n  {:event :boat-add \n   :id (:id @BOAT) \n   :data @BOAT})\n;;(pump-in-evt \n;;  {:event :boat-follow\n;;   :id (:id @BOAT)})\n(map-center)")
	(title "chart-connect []"))

([ProServer_Class120000] of  CloProgram

	(cloFunctions
		[ProServer_Class120003]
		[ProServer_Class120004]
		[ProServer_Class120005]
		[ProServer_Class120012]
		[ProServer_Class130000]
		[ProServer_Class120014]
		[ProServer_Class120015]
		[ProServer_Class120016]
		[ProServer_Class220000])
	(cloNamespace [ProServer_Class120001])
	(cloVars
		[ProServer_Class120002]
		[ProServer_Class120013])
	(title "Cesium Server"))

([ProServer_Class120001] of  CloNamespace

	(source "(:require\n    [ring.adapter.jetty :as jetty]\n    [ring.util.response :as r]\n    [compojure.core :refer [defroutes routes GET]]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [clojure.core.async :as async :refer [chan put! alts!!]]\n    [boat.mov :as bm]\n    [async.proc :as ap])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([ProServer_Class120002] of  CloVar

	(source "(async/chan)")
	(title "CZ-CHAN"))

([ProServer_Class120003] of  CloFunction

	(source "(async/put! CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([ProServer_Class120004] of  CloFunction

	(source "(loop [[bit ch] (alts!! [CZ-CHAN] :default :none) bits []]\n    (if (= bit :none)\n      bits\n      (recur (alts!! [CZ-CHAN] :default :none) (conj bits bit))))")
	(title "pump-out-events []"))

([ProServer_Class120005] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (pump-out-events)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([ProServer_Class120012] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([ProServer_Class120013] of  CloVar

	(source "true")
	(title "DOC-SND"))

([ProServer_Class120014] of  CloFunction

	(source "(str \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\",\\\"clock\\\":{\\\"currentTime\\\":\\\"\" (iso8601curt) \"\\\"}}\")")
	(title "doc []"))

([ProServer_Class120015] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"availability\\\":\\\"\"\n               (iso8601curt) \"/\" (iso8601futt span-sec)\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\" \n               scale\n               \" ,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -24]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([ProServer_Class120016] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([ProServer_Class130000] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([ProServer_Class140000] of  Rule

	(lhs "?no (NamedObject coord ?oco\n	time ?tim1)\n(Question coord ?bco\n	course ?crs\n	time ?tim2\n	((vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [bea (geo.calc/bear-deg ?bco ?oco)\n       dis (geo.calc/distance-nm ?bco ?oco)\n       sec (geo.calc/sector bea ?crs)\n       sid (geo.calc/side sec)]\n  (modify ?no polar [bea dis]\n	side sid\n	time ?tim2))")
	(salience 1)
	(title "as:UpdatePolarCoordObject"))

([ProServer_Class140002] of  CloFunction

	(source ";;(println [:QUESTION pp])\n(let [frm ['Question\n	'predicate (:predicate pp)\n	'subject (:subject pp)\n	'subject-value (:subject-value pp)\n	'object (:object pp)\n	'object-value (:object-value pp)\n	'time (as/current-time)]\n       frm (if-let [crd (:coord pp)]\n                (concat frm\n	['coord [(read-string (get crd \"0\"))\n	            (read-string (get crd \"1\"))]\n	 'course (read-string (:course pp))\n	 'speed (read-string (:speed pp))])\n                frm)]\n  (rete/assert-frame frm)\n  (rete/fire)\n  {:status 204})")
	(title "question [pp]"))

([ProServer_Class150000] of  CloFunction

	(source "(let [address (str \"http://localhost:\" PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([ProServer_Class150003] of  CloVar

	(source "(volatile! [])")
	(title "DATA"))

([ProServer_Class150015] of  CloFunction

	(source "(or (> (Math/abs (- lat1 lat2)) 0.02)\n     (> (Math/abs (- lon1 lon2)) 0.02))")
	(title "obsolete [[lat1 lon1] [lat2 lon2]]"))

([ProServer_Class150021] of  Rule

	(lhs "?i (Island coord ?ico\n	time ?tim1)\n(Question coord ?bco\n	course ?crs\n	time ?tim2\n	((vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [bea (geo.calc/bear-deg ?bco ?ico)\n       dis (geo.calc/distance-nm ?bco ?ico)\n       sec (geo.calc/sector bea ?crs)\n       sid (geo.calc/side sec)]\n  (modify ?i polar [bea dis]\n	sector sec\n	side sid\n	time ?tim2))")
	(salience 1)
	(title "as:UpdatePolarCoordIsland"))

([ProServer_Class160000] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"ahead\")\n(Island title ?tit side \"AHEAD\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsAhead_Isl"))

([ProServer_Class160001] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the starboard bow\")\n(Island title ?tit side \"STAR-BOW\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarBow_Isl"))

([ProServer_Class160002] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the port bow\")\n(Island title ?tit side \"PORT-BOW\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortBow_Isl"))

([ProServer_Class160003] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the starboard beam\")\n(Island title ?tit side \"STAR-BEAM\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarBeam_Isl"))

([ProServer_Class160004] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the port beam\")\n(Island title ?tit side \"PORT-BEAM\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortBeam_Isl"))

([ProServer_Class160005] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"abaft the starboard beam\")\n(Island title ?tit side \"STAR-ABAFT\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarAbaft_Isl"))

([ProServer_Class160009] of  Rule

	(lhs "?i (Island time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?i)")
	(salience 2)
	(title "as:RetractObsoleteIsland"))

([ProServer_Class160010] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(facts
		[ProServer_Class50001]
		[ProServer_Class60002]
		[ProServer_Class260002]
		[ProServer_Class80002]
		[ProServer_Class270001])
	(mode run)
	(rule-sets [ProServer_Class160099])
	(steps 1)
	(title "AS Run"))

([ProServer_Class160030] of  Rule

	(lhs "?h1 (History time ?tim1)\n?h2 (History time ?tim2\n	(.before ?tim1 ?tim2))")
	(rhs "(retract ?h1)")
	(salience 2)
	(title "MoveHistory"))

([ProServer_Class160041] of  CloProgram

	(cloFunctions
		[ProServer_Class160044]
		[ProServer_Class160045]
		[ProServer_Class160043]
		[ProServer_Class160062]
		[ProServer_Class160046]
		[ProServer_Class260004]
		[ProServer_Class160068]
		[ProServer_Class90013]
		[ProServer_Class150015]
		[ProServer_Class280005])
	(cloNamespace [ProServer_Class160042])
	(cloVars [ProServer_Class150003])
	(title "OSM Data"))

([ProServer_Class160042] of  CloNamespace

	(source "(:require\n   [clojure.xml :as x]\n   [menu.item :as mi]\n   [async.proc :as ap]\n   [rete.core :as rete])")
	(title "osm.data"))

([ProServer_Class160043] of  CloFunction

	(source "(try\n  (let [curl (osm-api-url bbx)\n         xml (x/parse curl)\n         cnt (:content xml)\n         nods (filter #(= (:tag %) :node) cnt)\n         nnn (filter #(some? (:content %)) nods)]\n      (map tag-tags-namcor nnn))\n  (catch Exception e\n    (println e)\n    nil))")
	(title "osm-data [bbx]"))

([ProServer_Class160044] of  CloFunction

	(source "(let [[w s e n] bbx] \n  (str \"http://api.openstreetmap.org/api/0.6/map?bbox=\" w \",\" s \",\" e \",\" n))")
	(title "osm-api-url [bbx]"))

([ProServer_Class160045] of  CloFunction

	(source "(let [cnt (:content tag)\n       tt (filter #(= (:tag %) :tag) cnt)\n       m {\"id\" (:id (:attrs tag))\n             \"lat\" (read-string (:lat (:attrs tag)))\n             \"lon\" (read-string (:lon (:attrs tag)))}\n       ml (cons m (map #(assoc {} (:k (:attrs %)) (:v (:attrs %))) tt))]\n  (apply merge ml))")
	(title "tag-tags-namcor [tag]"))

([ProServer_Class160046] of  CloFunction

	(source "(filter #(= (get % k) v) data)")
	(title "filter-kv [k v data]"))

([ProServer_Class160062] of  CloFunction

	(source "(filter #(some? (get % k)) data)")
	(title "filter-k [k data]"))

([ProServer_Class160068] of  CloFunction

	(source "(sort (set (mapcat keys data)))")
	(title "tags [data]"))

([ProServer_Class160099] of  RuleSet

	(rules
		[ProServer_Class160009]
		[ProServer_Class260000]
		[ProServer_Class90006]
		[ProServer_Class260003]
		[ProServer_Class90012]
		[ProServer_Class150021]
		[ProServer_Class140000]
		[ProServer_Class210011]
		[ProServer_Class80001]
		[ProServer_Class200021]
		[ProServer_Class320000]
		[ProServer_Class340001]
		[ProServer_Class320002]
		[ProServer_Class160000]
		[ProServer_Class210001]
		[ProServer_Class100004]
		[ProServer_Class210002]
		[ProServer_Class210003]
		[ProServer_Class30000]
		[ProServer_Class160004]
		[ProServer_Class210004]
		[ProServer_Class160002]
		[ProServer_Class210005]
		[ProServer_Class160005]
		[ProServer_Class210006]
		[ProServer_Class160003]
		[ProServer_Class210007]
		[ProServer_Class160001]
		[ProServer_Class210008]
		[ProServer_Class70000]
		[ProServer_Class110002]
		[ProServer_Class210000]
		[ProServer_Class280001]
		[ProServer_Class320004]
		[ProServer_Class310007]
		[ProServer_Class200000]
		[ProServer_Class220003]
		[ProServer_Class240012]
		[ProServer_Class240013]
		[ProServer_Class100005]
		[ProServer_Class250000]
		[ProServer_Class200019]
		[ProServer_Class210012]
		[ProServer_Class200001]
		[ProServer_Class180000]
		[ProServer_Class110003]
		[ProServer_Class110003])
	(templates
		[OSMData]
		[NamedObject]
		[Island]
		[NearbyObjects]
		[NearbyIslands]
		[Question]
		[Answer]
		[Answer2])
	(title "AdvisorSkipper"))

([ProServer_Class170000] of  CloFunction

	(source "(str tit (format \" (%.1f nm)\" dis))")
	(title "tit-dis [[tit dis]]"))

([ProServer_Class180000] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject \"behind the island\"\n	object ?tit)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc \n    (str \"behind the island \" ?tit)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerIslandsBehind"))

([ProServer_Class190000] of  CloMacro

	(source "`(let [f# (future (do ~@body))\n         v# (gensym)\n         result# (deref f# ~msec v#)]\n    (if (= v# result#)\n      (do\n        (println :FUTURE-CANCELLING)\n        (future-cancel f#)\n        (println :FUTURE-CANCELLED)\n        nil)\n      result#))")
	(title "with-timeout [msec & body]"))

([ProServer_Class190001] of  Rule

	(lhs "?b (Behind time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?b)")
	(salience 2)
	(title "as:RetractObsoleteBehind"))

([ProServer_Class2] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1.Loading Clojure Programs...\")\n(if-let [wps (seq (cls-instances \"WorkingPrograms\"))]\n  (loop [i 1 pins (svs (first wps) \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins))))\n  (println \"  Instance of WorkingPrograms not found!\"))\n(println \"2.Starting Rule Engine...\")\n(ClojureTab/invoke \"ru.rules\" \"run-engine\" \"AS Run\")\n(println \"3.Starting server...\")\n(ClojureTab/invoke \"pro.server\" \"start-server\")\n(println (str \"StartPoint: \" (ClojureTab/invoke \"pro.server\" \"map-center\")))\n(println \"4.Opening 3DView in a browser...\")\n(ClojureTab/invoke  \"pro.server\" \"view3D-in-browser\")\n(println \"EXPERT SYSTEM INITIALIZED\")")
	(title "clojure-work []"))

([ProServer_Class20000] of  CloFunction

	(source "(get-in @BOATS [id :speed])")
	(title "speed [id]"))

([ProServer_Class200000] of  Rule

	(lhs "?q (Question coord ?crd\n	predicate \"what\"\n	subject \"interesting\")")
	(rhs "(pro.server/pump-in-ans (as/search-nearby-things ?crd))\n(retract ?q)")
	(salience 0)
	(title "as:WhatInteresting"))

([ProServer_Class200001] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"nearby-objects\")")
	(rhs "(pro.server/pump-in-ans (sort @?acc))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerNearbyObjects"))

([ProServer_Class20001] of  CloFunction

	(source "(get-in @BOATS [id :course])")
	(title "course [id]"))

([ProServer_Class200018] of  CloFunction

	(source "(let [acc (sort-by second accum)\n       cnt (count acc)]\n  (condp > cnt\n    1 (str \"No islands in sight \" subject)\n    2 (str \"Island \" (tit-dis (first acc)) \" is \" subject)\n    6 (str \"Islands: \" (apply str (interpose \", \" (map tit-dis acc))) \" are \" subject)\n    (str \"Islands: \" (apply str (interpose \", \" (map tit-dis (take 5 acc)))) \" and more \" (- cnt 5) \" islands are \" subject)))")
	(title "ans-islands [accum subject]"))

([ProServer_Class200019] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"nearby-islands\")")
	(rhs "(pro.server/pump-in-ans (sort @?acc))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerNearbyIslands"))

([ProServer_Class20002] of  CloFunction

	(source "(get-in @BOATS [id :coord])")
	(title "coord [id]"))

([ProServer_Class200021] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"nearby-islands\")\n(Island title ?tit)")
	(rhs "(vswap! ?acc conj ?tit)")
	(salience 0)
	(title "as:NearbyIslands"))

([ProServer_Class210000] of  Rule

	(lhs "(OSMData radius ?rad)\n?q (Question predicate \"where-is\"\n	subject \"island\"\n	subject-value ?tit)\n(Island title ?tit side ?sid\n	polar ?pol\n	coord ?crd)")
	(rhs "(let [[bea dis] ?pol\n       ans (as/where-answer ?tit dis ?sid)]\n  (pro.server/pump-in-ans ans)\n  (cesium.core/point-out ?tit ?crd dis ?rad))\n(retract ?q)")
	(salience 0)
	(title "as:WhereIsIsland"))

([ProServer_Class210001] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"ahead\")\n(NamedObject title ?tit \n	side \"AHEAD\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsAhead_Obj"))

([ProServer_Class210002] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"astern\")\n(NamedObject title ?tit \n	side \"ASTERN\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsAstern_Obj"))

([ProServer_Class210003] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"abaft the port beam\")\n(Island title ?tit side \"PORT-ABAFT\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortAbaft_Isl"))

([ProServer_Class210004] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the port beam\")\n(NamedObject title ?tit \n	side \"PORT-BEAM\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortBeam_Obj"))

([ProServer_Class210005] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the port bow\")\n(NamedObject title ?tit \n	side \"PORT-BOW\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortBow_Obj"))

([ProServer_Class210006] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"abaft the starboard beam\")\n(NamedObject title ?tit \n	side \"STAR-ABAFT\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarAbaft_Obj"))

([ProServer_Class210007] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the starboard beam\")\n(NamedObject title ?tit \n	side \"STAR-BEAM\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarBeam_Obj"))

([ProServer_Class210008] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the starboard bow\")\n(NamedObject title ?tit \n	side \"STAR-BOW\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarBow_Obj"))

([ProServer_Class210011] of  Rule

	(lhs "?a (Answer time ?tim1)\n(Question time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(modify ?a accum (volatile! [])\n	time ?tim2)")
	(salience 1)
	(title "as:InitAnswer"))

([ProServer_Class210012] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n?q (Question predicate \"nearby-types\")")
	(rhs "(let [pts (map first @?pll)\n       nts (map first @?nal)\n       ats (map first @?aml)\n       all (set (concat pts nts ats))]\n  (pro.server/pump-in-ans (sort all)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerNearbyTypes"))

([ProServer_Class220000] of  CloFunction

	(source "(let [min-scl 0.25\n       scl (+ min-scl (* (- 1 min-scl) (- 1 (/ dist max-dist))))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 40))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([ProServer_Class220001] of  CloFunction

	(source "(println [:SEARCH_NEARBY_THINGS [lat lon]])\n(if-let [nsi (fainst (cls-instances \"NearbySearch\") nil)]\n  (if-let [sbn (with-timeout TIMEOUT \n	(wiki.gis/submit-nearby nsi lat lon))]\n    (let [rr (svs nsi \"responses\")]\n      (println [:TOTAL-FOUND (count rr)])\n      (def LAST-NEAR-SRCH nsi)\n      (sort (map #(sv % \"title\") rr))))\n  (do (println :NOT-FOUND)\n    []))")
	(title "search-nearby-things [[lat lon]]"))

([ProServer_Class220003] of  Rule

	(lhs "?q (Question predicate \"about\"\n	subject \"thing\"\n	subject-value ?sval)")
	(rhs "(pro.server/pump-in-ans (as/about-thing ?sval))\n(retract ?q)")
	(salience 0)
	(title "as:AboutThing"))

([ProServer_Class220004] of  CloFunction

	(source "(if-let [flt  (seq (filter #(= (sv % \"title\") val) (svs LAST-NEAR-SRCH \"responses\")))]\n  (extract (first flt))\n  \"Not found\")")
	(title "about-thing [val]"))

([ProServer_Class230000] of  CloFunction

	(source "(if (:chart @BOAT)\n    (pump-in-evt \n      {:event :boat-maneuver\n       :id (:id @BOAT) \n       :data @BOAT}))")
	(title "pump-in-mvr []"))

([ProServer_Class230002] of  StartPoint

	(coord 44.124 -68.736)
	(title "Near Isle Au Haut"))

([ProServer_Class240000] of  CloFunction

	(source "(if-let [ins (fainst (cls-instances \"StartPoint\") nil)]\n  (vec (svs ins \"coord\"))\n  (do (println \"Annotated instance of StartPoint not found!\")\n    [44.124 -68.736]))")
	(title "map-center []"))

([ProServer_Class240006] of  CloVar

	(source "15000")
	(title "TIMEOUT"))

([ProServer_Class240012] of  Rule

	(lhs "?q (Question coord ?crd\n	predicate \"about\"\n	subject \"island\"\n	object ?tit)")
	(rhs "(pro.server/pump-in-ans (if (or (.contains ?tit \"island\")\n		   (.contains ?tit \"Island\"))\n		(as/text-search ?tit ?crd)\n		(as/text-search (str ?tit \" Island\") ?crd)))\n(retract ?q)")
	(salience 0)
	(title "as:AboutIsland"))

([ProServer_Class240013] of  Rule

	(lhs "?q (Question coord ?crd\n	predicate \"about\"\n	subject ?sub\n	subject-value ?suv\n	((not= ?sub \"thing\")\n	 (not= ?sub \"island\")))")
	(rhs "(pro.server/pump-in-ans (as/text-search ?suv ?crd))\n(retract ?q)")
	(salience 0)
	(title "as:AboutObject"))

([ProServer_Class240014] of  CloFunction

	(source "(println [:TEXT-SEARCH txt crd])\n(if-let [fsi (fainst (cls-instances \"FulltextSearch\") nil)]\n  (if-let [wsr (with-timeout TIMEOUT \n	(geo.names/call-wiki-search txt \n	  (sv fsi \"max-responses\")  \n	  (wiki.gis/request-lang (sv fsi  \"language\"))))]\n    (let [_ (println [:TOTAL-FOUND (count wsr)])\n           _ (ssv fsi \"text\" txt)\n           _ (ssvs fsi \"responses\" \n	(if-let [wsf (filter #(near % crd 36) wsr)]\n                          (filter some? (map wiki.gis/article-from-map wsf))\n	  []))\n           rr (svs fsi \"responses\")\n           _ (println [:NEAR (count rr)])\n           ss (map extract rr)\n          resp (apply str ss)]\n      (if (empty? resp)\n        (str \"No info about this particular \" txt)\n        resp))\n      \"Timeout\")\n    \"Not found\")")
	(title "text-search [txt crd]"))

([ProServer_Class240015] of  FulltextSearch

	(button-clear-articles "Clear Articles/wiki.gis/clear-articles")
	(button-search "submit/wiki.gis/submit-search")
	(language English-en)
	(max-responses 12)
	(text "Deer Isle"))

([ProServer_Class240016] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [ProServer_Class240015])
	(%3ACREATION-TIMESTAMP "2016.06.23 13:26:44.379 MSK")
	(%3ACREATOR "ru"))

([ProServer_Class250000] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n?q (Question predicate \"what-is\"\n	subject ?sub)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-objects @?pll @?nal @?aml ?sub))\n(retract ?q)")
	(salience -2)
	(title "as:AnswerObjectsOnSide"))

([ProServer_Class250001] of  CloFunction

	(source "(letfn [(anso [acc cnt pfx]\n	(condp > cnt\n	  1 \"\"\n	  2 (str pfx \" object \" (kind-tit-dis (first acc)) \",<br>\")\n	  6 (str pfx \" objects: \" (apply str (interpose \", \" (map kind-tit-dis acc))) \",<br>\")\n	  (str pfx \" objects: \" (apply str (interpose \", \" (map kind-tit-dis (take 5 acc)))) \" and more \" (- cnt 5) \",<br>\")))]\n  (let [pll (sort-by second pll) cpl (count pll)\n          nal (sort-by second nal) cnl (count nal)\n          aml (sort-by second aml) cal (count aml)]\n    (str\n      (if (= (+ cpl cnl cal) 0)\n        \"No objects in sight \"\n        (str (anso pll cpl \"Place\")\n              (anso nal cnl \"Natural\")\n              (anso aml cal \"Amenity\")))\n      \"are \" subject)))")
	(title "ans-objects [pll nal aml subject]"))

([ProServer_Class260000] of  Rule

	(lhs "?no (NamedObject time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?no)")
	(salience 2)
	(title "as:RetractObsoleteObjects"))

([ProServer_Class260002] of  NearbyObjects

	(time 0))

([ProServer_Class260003] of  Rule

	(lhs "?no (NearbyObjects time ?tim1)\n(Question coord ?bco\n	course ?crs)\n(OSMData volume ?vol \n	time ?tim2\n	((> ?vol 0)\n	 (vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [nos (osm.data/filter-k \"name\" @osm.data/DATA)\n       nos (osm.data/filter-kv-not \"place\" \"island\" nos)\n       pls (osm.data/filter-k \"place\" nos)\n       nls (osm.data/filter-k \"natural\" nos)\n       ams (osm.data/filter-k \"amenity\" nos)]\n  (modify ?no place-list (vec (map #(get % \"name\") pls))\n	natural-list (vec (map #(get % \"name\") nls))\n	amenity-list (vec (map #(get % \"name\") ams))\n	time ?tim2)\n  (doseq [x pls]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	place (get x \"place\") time ?tim2))\n  (doseq [x nls]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	natural (get x \"natural\") time ?tim2))\n  (doseq [x ams]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	amenity (get x \"amenity\") time ?tim2)))")
	(salience 1)
	(title "as:AssertNearbyObjects"))

([ProServer_Class260004] of  CloFunction

	(source "(filter #(not= (get % k) v) data)")
	(title "filter-kv-not [k v data]"))

([ProServer_Class260006] of  CloFuncall

	(source "(ru.rules/sp :all)"))

([ProServer_Class270000] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(feature "waterbody")
	(lang "en")
	(lat "44.1872")
	(lng "-68.9211")
	(rank "96")
	(summary "Penobscot Bay originates from the mouth of Maine's Penobscot River. 11,000 years ago, at the beginning of the Holocene era, the Gulf of Maine's sea level fell as low as 180 feet (55 m) below its present height. Penobscot Bay was then a continuation of Penobscot River that meandered through a broad (...)")
	(title "Penobscot Bay")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Penobscot_Bay"))

([ProServer_Class270001] of  Answer2

	(time 0))

([ProServer_Class280000] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "10")
	(feature "city")
	(lang "en")
	(lat "44.1542")
	(lng "-68.8781")
	(population "355")
	(rank "94")
	(summary "North Haven is a town in Knox County, Maine, United States, in Penobscot Bay. The town is both a year-round island community and a prominent summer colony. The population was 355 at the 2010 census. North Haven is accessed by three-times daily ferry service from Rockland, or by air taxi from Knox (...)")
	(title "North Haven, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/North_Haven%2C_Maine"))

([ProServer_Class280001] of  Rule

	(lhs "(OSMData radius ?rad)\n?q (Question predicate \"where-is\"\n	subject ?sub\n	subject-value ?suv)\n(NamedObject title ?suv\n	side ?sid\n	polar ?pol\n	coord ?crd\n	((not= ?sub \"thing\")\n	 (not= ?sub \"island\")))")
	(rhs "(let [[bea dis] ?pol\n       ans (as/where-answer (str ?sub \" \" ?suv) dis ?sid)]\n  (pro.server/pump-in-ans ans)\n  (cesium.core/point-out (str ?sub \" \" ?suv) ?crd dis ?rad))\n(retract ?q)")
	(salience 0)
	(title "as:WhereIsObject"))

([ProServer_Class280005] of  CloFunction

	(source "(let [sta (for [t (tags @DATA)]\n	(let [fl (filter-k t @DATA)]\n	  [t (count fl)]))\n        sta  (filter #(> (second %) 0) sta)]\n  (sort second sta))")
	(title "tag-stat []"))

([ProServer_Class290000] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(feature "city")
	(lang "en")
	(lat "44.0217")
	(lng "-68.7936")
	(rank "96")
	(summary "Vinalhaven is a town located on the larger of the two Fox Islands in Knox County, Maine, United States. Vinalhaven is also used to refer to the Island itself. The population was 1,165 at the 2010 census. It is home to a thriving lobster fishery and hosts a summer colony (...)")
	(title "Vinalhaven, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Vinalhaven%2C_Maine"))

([ProServer_Class290001] of  CloFunction

	(source "(str kind \" \" tit (format \" (%.1f nm)\" dis))")
	(title "kind-tit-dis [[kind tit dis]]"))

([ProServer_Class3] of  WorkingPrograms

	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[ProServer_Class0]
		[ProServer_Class30001]
		[ProServer_Class40001]
		[ProServer_Class10000]
		[ProServer_Class160041]
		[ProServer_Class120000]
		[Example_Class10000]
		[GeoNamesWikipedia_Class0]
		[ProServer_Class90007]
		[ProServer_Class80003])
	(title "ProServer Working Programs"))

([ProServer_Class30000] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"abaft the port beam\")\n(NamedObject title ?tit \n	side \"PORT-ABAFT\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortAbaft_Obj"))

([ProServer_Class300000] of  CloFunction

	(source "(if-let [rsp (geo.names/call-geonames-weather lat lon)]\n  (let [lat2 (read-string (rsp \"lat\"))\n          lon2 (read-string (rsp \"lng\"))\n          bear (geo.names/bearing lat lon lat2 lon2)\n          dir (geo.names/direction bear)\n          dis (rough-distance lat lon lat2 lon2)\n          name (rsp \"stationName\")\n          wcd (rsp \"weatherCondition\")\n          hym (rsp \"hymidity\")\n          tmp (rsp \"temperature\")\n          wind (rsp \"windDirection\")\n          bwnd (if (some? wind)\n	(let [b (+ (read-string wind) 180)] (if (> b 360) (- b 360) b)))\n          win (if (some? bwnd)\n	(geo.names/direction bwnd)\n	\"n/a\")\n          wins (rsp \"windSpeed\")\n          tim (rsp \"observationTime\")\n          loc (str dis \" miles to \" dir \" from here\")]\n    (str name \" Weather Station<br>\"\n	\"location: \" loc \"<br>\"\n	\"observation time: \" tim \"<br>\"\n	\"weather conditions: \" wcd \"<br>\"\n	\"temperature: \" tmp \" Celsius<br>\"\n	\"hymidity: \" hym \"<br>\"\n	\"wind: \" win \", \" wins \" Knots\"))\n  \"I can not get a weather information\")")
	(title "weather [[lat lon]]"))

([ProServer_Class300001] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation "56")
	(lang "en")
	(lat "44.391")
	(lng "-68.8056")
	(rank "96")
	(summary "The Penobscot Expedition was a 44-ship American naval task force mounted during the Revolutionary War by the Provincial Congress of the Province of Massachusetts Bay. The flotilla of 19 warships and 25 smaller support vessels sailed from Boston on July 19, 1779 for the upper Penobscot Bay in the (...)")
	(title "Penobscot Expedition")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Penobscot_Expedition"))

([ProServer_Class300005] of  NearbySearch

	(button-clear-articles "Clear Articles/wiki.gis/clear-articles")
	(button-nearby "submit/wiki.gis/submit-nearby")
	(language English-en)
	(lat "62.4444")
	(lng "5.88")
	(max-responses 12)
	(radius-km 20)
	(responses
		[ProServer_Class350001]
		[ProServer_Class350002]
		[ProServer_Class360003]
		[ProServer_Class360004]
		[ProServer_Class360005]
		[ProServer_Class360006]
		[ProServer_Class360007]
		[ProServer_Class360008]
		[ProServer_Class360009]
		[ProServer_Class360010]
		[ProServer_Class360011]
		[ProServer_Class360012]))

([ProServer_Class300006] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [ProServer_Class300005])
	(%3ACREATION-TIMESTAMP "2016.06.22 16:05:35.111 MSK")
	(%3ACREATOR "ru"))

([ProServer_Class30001] of  CloProgram

	(cloFunctions
		[ProServer_Class30003]
		[ProServer_Class30004]
		[ProServer_Class30005]
		[ProServer_Class30006]
		[ProServer_Class30007]
		[ProServer_Class30008]
		[ProServer_Class30009]
		[ProServer_Class30010]
		[ProServer_Class30011]
		[ProServer_Class30012]
		[ProServer_Class70001]
		[ProServer_Class90005])
	(cloNamespace [ProServer_Class30002])
	(title "Geo Calculus"))

([ProServer_Class30002] of  CloNamespace

	(title "geo.calc"))

([ProServer_Class30003] of  CloFunction

	(source "(let [cosphi1 (Math/cos phi1)\n        sinphi1 (Math/sin phi1)\n        cosaz (Math/cos az)\n        sinaz (Math/sin az)\n        sinc (Math/sin c)\n        cosc (Math/cos c)\n        phi2 (Math/asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n        lam2 (+ (Math/atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n    [phi2 lam2])")
	(title "spherical-between [^double phi1 ^double lambda0 ^double c ^double az]"))

([ProServer_Class30004] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n        ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n        rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) ldiff ldiff)))]\n    (* 2.0 (Math/asin rval)))")
	(title "spherical-distance [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30005] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n        cosphi (Math/cos phi)]\n    (Math/atan2 (* cosphi (Math/sin ldiff))\n                  (- (* (Math/cos phi1) (Math/sin phi)) (* (Math/sin phi1) cosphi (Math/cos ldiff)))))")
	(title "spherical-azimuth [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30006] of  CloFunction

	(source "(let [phi (Math/toRadians lat)\n        lam (Math/toRadians lon)\n        dir (Math/toRadians crs)\n        way (* spd tim)\n        way (Math/toRadians (/ way 60))\n        [phi2 lam2] (spherical-between phi lam way dir)]\n    [(Math/toDegrees phi2) (Math/toDegrees lam2)])")
	(title "future-pos [[lat lon] crs spd tim]"))

([ProServer_Class30007] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-distance fi1 ld1 fi2 ld2)]\n    (* (Math/toDegrees rad) 60))")
	(title "distance-nm [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30008] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-azimuth fi1 ld1 fi2 ld2)\n        deg (int (Math/toDegrees rad))]\n    (cond\n       (< deg 0) (+ deg 360)\n       (> deg 360) (- deg 360)\n       true deg))")
	(title "bear-deg [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30009] of  CloFunction

	(source "(let [denom (- (* (- y4 y3) (- x2 x1)) (* (- x4 x3) (- y2 y1)))]\n    (if (not (== denom 0.0))\n      (let [ua (/ (- (* (- x4 x3) (- y1 y3)) (* (- y4 y3) (- x1 x3))) denom)\n            ub (/ (- (* (- x2 x1) (- y1 y3)) (* (- y2 y1) (- x1 x3))) denom)]\n        (if (and (<= 0.0 ua 1.0) (<= 0.0 ub 1.0))\n          [(+ y1 (* ua (- y2 y1))) (+ x1 (* ua (- x2 x1)))]))))")
	(title "seg-intersect [x1 y1 x2 y2 x3 y3 x4 y4]"))

([ProServer_Class30010] of  CloFunction

	(source "(let [rb (+ b 180)]\n    (if (> rb 360) (- rb 360) rb))")
	(title "rev-bear [b]"))

([ProServer_Class30011] of  CloFunction

	(source "(let [bea (bear-deg [lat1 lon1] [lat2 lon2])\n        ca1 (- bea crs)]\n    (cond\n     (> ca1 180) (- ca1 360)\n     (< ca1 -180) (+ ca1 360)\n     true ca1))")
	(title "course-angle [crs [lat1 lon1] [lat2 lon2]]"))

([ProServer_Class30012] of  CloFunction

	(source "(let [ca (course-angle crs crd1 crd2)]\n    (or (> ca 90) (< ca -90)))")
	(title "abaft [crs crd1 crd2]"))

([ProServer_Class310000] of  CloFunction

	(source "(letfn [(smround [n]\n	(/ (float (Math/round (* n 10))) 10))]\n(let [dlat (- lat1 lat2)\n        dlon (- lon1 lon2)\n        lad (* (if (>= dlat 0) dlat (- 0 dlat)) 60)\n        lod (* (if (>= dlon 0) dlon (- 0 dlon)) 60)\n        dia (Math/sqrt (+ (* lad lad) (* lod lod)))]\n   (if (< dia 1) (smround dia) (Math/round dia)))\n)")
	(title "rough-distance [lat1 lon1 lat2 lon2]"))

([ProServer_Class310001] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "15")
	(feature "airport")
	(lang "en")
	(lat "44.06")
	(lng "-69.0992")
	(rank "84")
	(summary "Knox County Regional Airport is a county owned, public use airport in Knox County, Maine, United States. It is located three nautical miles (6 km) south of the central business district of Rockland, Maine. The airport serves the residents of midcoast Maine with commercial and charter aviation (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/40000/thumb-39772-100.jpg")
	(title "Knox County Regional Airport")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Knox_County_Regional_Airport"))

([ProServer_Class310002] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "19")
	(feature "edu")
	(lang "en")
	(lat "44.0486")
	(lng "-68.8219")
	(rank "15")
	(summary "Vinalhaven School is a kindergarten-through-twelfth-grade public school located at 22 Arcola Lane, Vinalhaven, an island located in mid-coast Maine, 75 miles east northeast of Portland. Vinalhaven School is divided into five teams: the K-2 Team, 3-5 Team, Middle School Team, High School Team and (...)")
	(title "Vinalhaven School")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Vinalhaven_School"))

([ProServer_Class310003] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "14")
	(feature "city")
	(lang "en")
	(lat "44.1094")
	(lng "-69.1147")
	(rank "98")
	(summary "Rockland is a city in Knox County, Maine, in the United States. As of the 2010 census, the city population was 7,297. It is the county seat of Knox County. The city is a popular tourist destination. It is a departure point for the Maine State Ferry Service to the islands of Penobscot Bay: (...)")
	(title "Rockland, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Rockland%2C_Maine"))

([ProServer_Class310004] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "9")
	(lang "en")
	(lat "44.0505")
	(lng "-68.8417")
	(rank "70")
	(summary "Fox Islands Electric Cooperative is a utility cooperative based in Vinalhaven, Maine. The cooperative provides electricity for the residents of Penobscot Bay islands North Haven and Vinalhaven. Vinalhaven is home to the Fox Islands Wind Project's three 1 (...)")
	(title "Fox Islands Electric Cooperative")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Fox_Islands_Electric_Cooperative"))

([ProServer_Class310005] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "29")
	(feature "city")
	(lang "en")
	(lat "44.3061")
	(lng "-68.9089")
	(population "566")
	(rank "94")
	(summary "Islesboro is a town in Waldo County, Maine, United States. The population was 566 at the 2010 census. It has a summer colony accessible by ferry from Lincolnville Beach 3 miles to the west, or by air taxi service (...)")
	(title "Islesboro, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Islesboro%2C_Maine"))

([ProServer_Class310006] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "24")
	(feature "city")
	(lang "en")
	(lat "44.1683")
	(lng "-68.6642")
	(population "1152")
	(rank "89")
	(summary "Stonington is a town in Hancock County, Maine, United States, located on the southern portion of Deer Isle. The population was 1,152 at the 2000 census. It includes the villages of Oceanville and West Stonington (...)")
	(title "Stonington, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Stonington%2C_Maine"))

([ProServer_Class310007] of  Rule

	(lhs "?q (Question coord ?crd\n	predicate \"what-is\"\n	subject \"weather\")")
	(rhs "(pro.server/pump-in-ans (as/weather ?crd))\n(retract ?q)")
	(salience 0)
	(title "as:Weather"))

([ProServer_Class320000] of  Rule

	(lhs "?a (Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"nearby-types\")\n(NamedObject title ?tit\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (string? ?nat) (vswap! ?nal conj [?nat ?tit])\n  (string? ?pla) (vswap! ?pll conj [?pla ?tit])\n  (string? ?ame) (vswap! ?aml conj [?ame ?tit]))")
	(salience 0)
	(title "as:NearbyTypes"))

([ProServer_Class320001] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "26")
	(feature "edu")
	(lang "en")
	(lat "44.1882")
	(lng "-68.584")
	(rank "41")
	(summary "Haystack Mountain School of Crafts, commonly called \"Haystack,\" is a craft school located on the coast of Deer Isle, Maine. Haystack was founded in 1950 by a group of craft artists in the Belfast, Maine area, with support from Mary Beasom Bishop (...)")
	(title "Haystack Mountain School of Crafts")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Haystack_Mountain_School_of_Crafts"))

([ProServer_Class320002] of  Rule

	(lhs "?q (Question coord ?crd\n	predicate \"nearby-things\")")
	(rhs "(pro.server/pump-in-ans (as/nearby-things ?crd))\n(retract ?q)")
	(salience 0)
	(title "as:NearbyThings"))

([ProServer_Class320003] of  CloFunction

	(source "(if-let [nts (and LAST-NEAR-SRCH \n	(seq (svs LAST-NEAR-SRCH \"responses\")))]\n  (sort (map #(sv % \"title\") nts))\n  (search-nearby-things crd))")
	(title "nearby-things [crd]"))

([ProServer_Class320004] of  Rule

	(lhs "(OSMData radius ?rad)\n?q (Question predicate \"where-is\"\n	subject \"thing\"\n	subject-value ?tit\n	coord ?crd\n	course ?crs)")
	(rhs "(if-let [tcr (as/thing-coord ?tit)]\n  (let [dis (geo.calc/distance-nm ?crd tcr)\n         bea (geo.calc/bear-deg ?crd tcr)\n         sec (geo.calc/sector bea ?crs)\n         sid (geo.calc/side sec)\n         ans (as/where-answer ?tit dis sid)]\n    (pro.server/pump-in-ans ans)\n    (cesium.core/point-out ?tit tcr dis ?rad))\n  (pro.server/pump-in-ans (str \"No coordinates for \" ?tit)))\n(retract ?q)")
	(salience 0)
	(title "as:WhereIsThing"))

([ProServer_Class320005] of  CloFunction

	(source "(if-let [flt  (seq (filter #(= (sv % \"title\") tit) (svs LAST-NEAR-SRCH \"responses\")))]\n  [(read-string (sv (first flt) \"lat\"))\n   (read-string (sv (first flt) \"lng\"))])")
	(title "thing-coord [tit]"))

([ProServer_Class320007] of  CloFunction

	(source "(if-let [lat2 (get mp \"lat\")]\n  (if-let [lon2 (get mp \"lng\")]\n    (let [lat2 (read-string lat2)\n           lon2 (read-string lon2)\n           rdg (float (/ rad 60))]\n      (and (number? lat2)\n        (number? lon2)\n        (< (Math/abs (- lat lat2)) rdg)\n        (< (Math/abs (- lon lon2)) rdg)) ) ))")
	(title "near [mp [lat lon] rad]"))

([ProServer_Class330000] of  CloFunction

	(source "(condp = sid\n  \"AHEAD\"          \"ahead\"\n  \"STAR-BOW\"    \"on the starboard bow\"\n  \"STAR-BEAM\"   \"on the starboard beam\"\n  \"STAR-ABAFT\" \"abaft the starboard beam\"\n  \"ASTERN\"         \"astern\"\n  \"PORT-ABAFT\" \"abaft the port beam\"\n  \"PORT-BEAM\"  \"on the port beam\"\n  \"PORT-BOW\"   \"on the port bow\")")
	(title "nl-side [sid]"))

([ProServer_Class330001] of  CloFunction

	(source "(str tit \" is in \" (format \"%.1f miles\" dis) \" \" (as/nl-side sid))")
	(title "where-answer [tit dis sid]"))

([ProServer_Class330007] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(feature "landmark")
	(lang "en")
	(lat "44.1344")
	(lng "-68.7033")
	(rank "23")
	(summary "Deer Island Thorofare Light, also known as Mark Island Light, is a lighthouse on Penobscot Bay, Maine, about west-southwest of Stonington. It was built in 1857.  (...)")
	(title "Deer Island Thorofare Light")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Deer_Island_Thorofare_Light"))

([ProServer_Class330008] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "10")
	(feature "airport")
	(lang "en")
	(lat "44.1733")
	(lng "-68.6803")
	(rank "33")
	(summary "Stonington Municipal Airport is a public airport located one mile (1.6 km) northwest of the central business district (CBD) of Stonington, a town in Hancock County, Maine, USA. The airport covers 12 acres and has one runway. It provides service to private and charter aircraft traffic only (...)")
	(title "Stonington Municipal Airport")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Stonington_Municipal_Airport"))

([ProServer_Class330009] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "36")
	(feature "isle")
	(lang "en")
	(lat "44.2125")
	(lng "-68.775")
	(rank "12")
	(summary "Eagle Island is a 263-acre island in Penobscot Bay, Maine, between North Haven and Deer Isle, in Hancock County. It is not part of the nearby Town of Deer Isle but is an unincorporated territory of the state. The island was conveyed to Samuel Quinn by John C (...)")
	(title "Eagle Island (Penobscot Bay, Maine)")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Eagle_Island_%28Penobscot_Bay%2C_Maine%29"))

([ProServer_Class330010] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "27")
	(feature "isle")
	(lang "en")
	(lat "44.21")
	(lng "-68.6853")
	(rank "44")
	(summary "Deer Isle is an island in Hancock County, Maine, United States. There are two communities on the island, Deer Isle and Stonington. It is on the eastern side of Penobscot Bay, connected by road to the Maine mainland through Little Deer Isle (...)")
	(title "Deer Isle (island)")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Deer_Isle_%28island%29"))

([ProServer_Class330011] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation "11")
	(feature "landmark")
	(lang "en")
	(lat "44.2176")
	(lng "-68.7678")
	(rank "26")
	(summary "For Eagle Island Lighthouse in County Mayo, Ireland, see Eagle Island, County Mayo Eagle Island Light is a lighthouse on Eagle Island in Penobscot Bay. The tower was first lit in 1838 but had to be torn down because of physical defects (...)")
	(title "Eagle Island Light")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Eagle_Island_Light"))

([ProServer_Class330012] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "22")
	(feature "city")
	(lang "en")
	(lat "44.2247")
	(lng "-68.6769")
	(population "1975")
	(rank "94")
	(summary "Deer Isle is a town in Hancock County, Maine, United States. The population was 1,975 at the 2010 census. Notable landmarks in Deer Isle are the Haystack Mountain School of Crafts and the town's many art galleries.  (...)")
	(title "Deer Isle, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Deer_Isle%2C_Maine"))

([ProServer_Class330013] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "126")
	(feature "city")
	(lang "en")
	(lat "44.0483")
	(lng "-68.6237")
	(rank "90")
	(summary "Isle au Haut is a town in Knox County, Maine, United States, on an island of the same name in Penobscot Bay. The population was 73 at the 2010 census. Home to portions of Acadia National Park, Isle au Haut is accessible by mailboat (no auto ferries) from Stonington.  (...)")
	(title "Isle au Haut, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Isle_au_Haut%2C_Maine"))

([ProServer_Class330014] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation "6")
	(lang "en")
	(lat "44.0381")
	(lng "-68.8336")
	(rank "1")
	(summary "Lane's Island is an island which is part of the town of Vinalhaven in Knox County, Maine. It is approximately 45 acres in size and connected by causeway to mainland Vinalhaven. About 2/3 of the island is protected by a nature preserve (...)")
	(title "Lane's Island")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Lane%27s_Island"))

([ProServer_Class340000] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [ProServer_Class230002])
	(%3ACREATION-TIMESTAMP "2016.10.23 21:00:02.297 MSK")
	(%3ACREATOR "ru"))

([ProServer_Class340001] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"nearby-objects\"\n	subject ?sub)\n(NamedObject title ?tit\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(if (or (= ?sub ?pla)\n         (= ?sub ?nat)\n         (= ?sub ?ame))\n  (vswap! ?acc conj ?tit))")
	(salience 0)
	(title "as:NearbyObjects"))

([ProServer_Class340005] of  CloFunction

	(source "(let [ell \"(...)\"\n       sum (sv ins \"summary\")\n       img (sv ins \"thumbnailImg\")\n       lnk (sv ins \"wikipediaUrl\")\n       sum (if (and (not (empty? lnk)) (.contains sum ell))\n	(.replace sum ell (str \"<a href=\\\"\" lnk \"\\\">\" ell \"</a>\"))\n	sum)]\n  (str (or sum \"No summary\")\n        (or (and img (str \"<br><img src=\\\"\" img \"\\\">\")) \"\")\n        \"<br>\"))")
	(title "extract [ins]"))

([ProServer_Class350000] of  CloVar

	(source "nil")
	(title "LAST-NEAR-SRCH"))

([ProServer_Class350001] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "isle")
	(lang "en")
	(lat "62.4076")
	(lng "5.9389")
	(rank "87")
	(summary "Hareidlandet is an island in Møre og Romsdal county, Norway. The island is divided between Hareid Municipality and Ulstein Municipality. The island has a population (2008) of 11,687. The island is mentioned by Snorri in his reports about the Battle of Hjörungavágr (today this is Hjørungavåg) in 986 (...)")
	(title "Hareidlandet")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Hareidlandet"))

([ProServer_Class350002] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "landmark")
	(lang "en")
	(lat "62.4319")
	(lng "5.7561")
	(rank "55")
	(summary "Grasøyane Lighthouse is a coastal lighthouse in Ulstein Municipality in Møre og Romsdal, Norway. It sits on the small island of Grasøya, about northwest of the island of Hareidlandet on which Ulstein Municipality is located and it is east of Runde Lighthouse (...)")
	(title "Grasøyane Lighthouse")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Gras%C3%B8yane_Lighthouse"))

([ProServer_Class350003] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation "17")
	(feature "isle")
	(lang "en")
	(lat "44.2361")
	(lng "-68.825")
	(rank "2")
	(summary "Great Spruce Head Island is a privately owned island in Penobscot Bay, Maine. It is part of the Town of Deer Isle, in Hancock County. It has long belonged to the family of the painter Fairfield Porter and his brother, photographer Eliot Porter, both of whom did creative work there (...)")
	(title "Great Spruce Head Island")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Great_Spruce_Head_Island"))

([ProServer_Class360003] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "city")
	(lang "en")
	(lat "62.4856")
	(lng "5.9742")
	(rank "71")
	(summary "Alnes is a small village in Giske Municipality in Møre og Romsdal county, Norway. It is located on the (isolated) north side of the island of Godøya, about northwest of the village of Leitebakk. The rest of the island's population is located on the southern half of the island, separated from Alnes (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/81000/thumb-80763-100.jpg")
	(title "Alnes")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Alnes"))

([ProServer_Class360004] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "isle")
	(lang "en")
	(lat "62.4689")
	(lng "5.9989")
	(rank "77")
	(summary "Godøy is an island in Giske Municipality in Møre og Romsdal county, Norway. The island is famous for its beautiful nature, dominated by the tall mountain Storhornet and the large lake Alnesvatnet. Most of the population lives on the southeastern side of the island in Godøy and Leitebakk, although (...)")
	(title "Godøy")
	(wikipediaUrl "http://en.wikipedia.org/wiki/God%C3%B8y"))

([ProServer_Class360005] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "landmark")
	(lang "en")
	(lat "62.4897")
	(lng "5.9672")
	(rank "66")
	(summary "Alnes lighthouse was established in 1852 to guide fishing boats safely to the harbor of the small fishing community of Alnes on Godøy island on the west coast of Norway. It is located on the north side of Godøy island in the municipality of Giske in Møre og Romsdal county, about northwest of (...)")
	(title "Alnes Lighthouse")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Alnes_Lighthouse"))

([ProServer_Class360006] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "landmark")
	(lang "en")
	(lat "62.4683")
	(lng "6.0152")
	(rank "42")
	(summary "Godøy Chapel is a chapel in Giske Municipality in Møre og Romsdal county, Norway. It is located on the island of Godøy. The chapel is part of the Giske parish in the Nordre Sunnmøre deanery in the Diocese of Møre. The stone chapel was built in 1953 by the architect O.S. Solheim (...)")
	(title "Godøy Chapel")
	(wikipediaUrl "http://en.wikipedia.org/wiki/God%C3%B8y_Chapel"))

([ProServer_Class360007] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "city")
	(lang "en")
	(lat "62.4006")
	(lng "6.0081")
	(rank "73")
	(summary "Brandal is a village in Hareid Municipality in Møre og Romsdal county, Norway. It is located on the eastern shores of the island of Hareidlandet, along the Sulafjorden. The village lies about north of the municipal centre of Hareid and about northeast of the town of Ulsteinvik on the other side of (...)")
	(title "Brandal")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Brandal"))

([ProServer_Class360008] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "city")
	(lang "en")
	(lat "62.4794")
	(lng "6.0289")
	(rank "70")
	(summary "Leitebakk is a small village on the island of Godøya in Giske Municipality in Møre og Romsdal county, Norway. The village is located about southeast of the isolated village of Alnes, where Alnes Lighthouse is located (...)")
	(title "Leitebakk")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Leitebakk"))

([ProServer_Class360009] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "landmark")
	(lang "en")
	(lat "62.4931")
	(lng "6.0467")
	(rank "48")
	(summary "The Godøy Tunnel is a subsea road tunnel which runs between the islands of Giske and Godøy in Giske Municipality, Møre og Romsdal county, Norway. The tunnel is long; it is part of County Road 658 and the Vigra Fixed Link. It opened in 1989 (...)")
	(title "Godøy Tunnel")
	(wikipediaUrl "http://en.wikipedia.org/wiki/God%C3%B8y_Tunnel"))

([ProServer_Class360010] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "landmark")
	(lang "en")
	(lat "62.4987")
	(lng "6.0502")
	(rank "54")
	(summary "Giske Church is a 12th-century marble parish church in Giske Municipality in Møre og Romsdal county, Norway. It is located on the south side of the island of Giske, about northwest of the town of Ålesund. The church is part of the Giske parish in the Nordre Sunnmøre deanery in the Diocese of Møre (...)")
	(title "Giske Church")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Giske_Church"))

([ProServer_Class360011] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "isle")
	(lang "en")
	(lat "62.505")
	(lng "6.0481")
	(rank "73")
	(summary "Giske is an island in Giske Municipality in Møre og Romsdal county, Norway. It covers an area of and had 717 residents in 2010. It is flat, with the highest point above mean sea level. The island is connected by the Giske Bridge to the neighboring island of Valderøya to the east and by the Godøy (...)")
	(title "Giske (island)")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Giske_%28island%29"))

([ProServer_Class360012] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "NO")
	(feature "city")
	(lang "en")
	(lat "62.5056")
	(lng "6.05")
	(rank "94")
	(summary "Giske is an island municipality in Møre og Romsdal county, Norway. The municipality lies north-northwest of the town of Ålesund in the traditional district of Sunnmøre. The municipal center is Valderhaugstrand, part of the village of Nordstrand on the southern coast of the island of Valderøya (...)")
	(title "Giske")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Giske"))

([ProServer_Class40000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(AdvisorSkipper)"))

([ProServer_Class40001] of  CloProgram

	(cloFunctions
		[ProServer_Class40002]
		[ProServer_Class40003]
		[ProServer_Class40004]
		[ProServer_Class40005])
	(cloNamespace [ProServer_Class40006])
	(title "Async Processing"))

([ProServer_Class40002] of  CloFunction

	(source "(when (not= @status-vol \"RUNNING\") \n  (vreset! status-vol \"RUNNING\")\n  (go (do \n          (while (and (= @status-vol \"RUNNING\")\n                          (or (nil? cond-func) (cond-func)))\n                (proc-func)\n                (<! (timeout time-out)))\n          (vreset! status-vol \"STOPPED\")))\n  @status-vol)")
	(title "start-proc [status-vol proc-func time-out cond-func]"))

([ProServer_Class40003] of  CloFunction

	(source "(vreset! status-vol \"STOP\")")
	(title "stop-proc [status-vol]"))

([ProServer_Class40004] of  CloFunction

	(source "(= @status-vol \"RUNNING\")")
	(title "running? [status-vol]"))

([ProServer_Class40005] of  CloFunction

	(source "(go (while true\n           (proc-func)\n           (<! (timeout time-out))))")
	(title "repeater [proc-func time-out]"))

([ProServer_Class40006] of  CloNamespace

	(source "(:require \n  [clojure.core.async :as async :refer [chan alts!! put! <! go timeout]])")
	(title "async.proc"))

([ProServer_Class50000] of  CloFunction

	(source "(letfn [(mov []\n            (doseq [[id bdt] (seq @BOATS)]\n              (let [man-func (partial mf id)]\n                (vswap! BOATS assoc id \n                  (-> bdt\n                    (move)\n                    (engine man-func)\n                    (helm man-func))))))]\n  (def add-func af)\n  (def rem-func rf)\n  (ap/start-proc mov-status #(mov) BOAT-TIO nil)\n  (println  \"Boats movement started..\"))")
	(title "start-boat-movement [mf af rf]"))

([ProServer_Class50001] of  OSMData

	(coord 0.0 0.0)
	(radius 6.0)
	(time 0)
	(volume 0))

([ProServer_Class50002] of  CloVar

	(source "(volatile! \"START\")")
	(title "mov-status"))

([ProServer_Class50003] of  CloFunction

	(source "(let [bdt {:coord coord\n               :course crs\n               :speed spd\n               :helm :steady\n               :engine spd\n               :time-from-turn 0\n               :turn-coord coord}]\n  (vswap! BOATS assoc id bdt)\n  (add-func id bdt))")
	(title "boat-add [id coord crs spd]"))

([ProServer_Class50004] of  CloFunction

	(source "(rem-func id (@BOATS id))\n(vswap! BOATS dissoc id)")
	(title "boat-rem [id]"))

([ProServer_Class60000] of  CloFunction

	(source "(vswap! BOATS assoc-in [id :helm] cmd)")
	(title "boat-helm [id cmd]"))

([ProServer_Class60001] of  CloFunction

	(source "(let [knots (max (min knots SPD-MAX) SPD-MIN)]\n  (vswap! BOATS assoc-in [id :engine] knots))")
	(title "boat-engine [id knots]"))

([ProServer_Class60002] of  NearbyIslands

	(time 0))

([ProServer_Class60003] of  CloFunction

	(source "(ap/stop-proc mov-status)")
	(title "stop-boat-movement []"))

([ProServer_Class70000] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"behind the island\"\n	object ?tit1)\n(Island sector ?sec\n	title ?tit1\n	polar ?pol1)\n(Island sector ?sec\n	title ?tit2\n	polar ?pol2\n	(< (second ?pol1)\n	    (second ?pol2)))")
	(rhs "(vswap! ?acc conj [?tit2 (second ?pol2)])")
	(salience 0)
	(title "as:IslandsBehind"))

([ProServer_Class70001] of  CloFunction

	(source "(let [cr (- bea crs)\n       cr (if (< cr 0) (+ cr 360) cr)]\n  (inc (int (/ cr 30))))")
	(title "sector [bea crs]"))

([ProServer_Class70008] of  CloVar

	(source "nil")
	(title "rem-func"))

([ProServer_Class70009] of  CloVar

	(title "add-func"))

([ProServer_Class80000] of  CloFunction

	(source "(slurp (str ROOT \"index.html\"))")
	(title "index-page []"))

([ProServer_Class80001] of  Rule

	(lhs "?a2 (Answer2 time ?tim1)\n(Question time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(modify ?a2 time ?tim2\n	place-list (volatile! [])\n	natural-list (volatile! [])\n	amenity-list (volatile! []))")
	(salience 1)
	(title "as:InitAnswer2"))

([ProServer_Class80002] of  Answer

	(time 0))

([ProServer_Class80003] of  CloProgram

	(cloFunctions
		[ProServer_Class80000]
		[ProServer_Class80018]
		[ProServer_Class80019]
		[ProServer_Class90003]
		[ProServer_Class80004]
		[ProServer_Class80017]
		[ProServer_Class230000]
		[ProServer_Class100000]
		[ProServer_Class90001]
		[ProServer_Class140002]
		[ProServer_Class240000]
		[ProServer_Class110004]
		[ProServer_Class80007]
		[ProServer_Class80008]
		[ProServer_Class80009]
		[ProServer_Class150000])
	(cloNamespace [ProServer_Class80016])
	(cloVars
		[ProServer_Class90000]
		[ProServer_Class80012]
		[ProServer_Class90002]
		[ProServer_Class80013]
		[ProServer_Class80014]
		[ProServer_Class80015]
		[ProServer_Class100001])
	(title "Pro Server"))

([ProServer_Class80004] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([ProServer_Class80007] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (index-page))\n  (GET \"/map-center/\" [] (write-transit (map-center)))\n  (GET \"/chart/\" [] (write-transit (chart-connect)))\n  (GET \"/question/\" [& params] (question params))\n  (GET \"/answer/\" [] (answer))\n  (GET \"/events/\" [] (events))\n  (GET \"/maneuver/\" [& params] (maneuver params))\n  (GET \"/czml/\" [] (cz/events))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([ProServer_Class80008] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false}))\n;;  (bm/start-boat-movement\n;;    #(pump-in-evt {:event :boat-maneuver :id %1 :data %2})\n;;    #(pump-in-evt {:event :boat-add :id %1 :data %2})\n;;    #(pump-in-evt {:event :boat-remove :id %1 :data %2})))\n   )")
	(title "start-server"))

([ProServer_Class80009] of  CloFunction

	(source "(when-let [serv SERV]\n  (bm/stop-boat-movement)\n  (.stop serv)\n  (def SERV nil)\n  (println \"Server stopped!\"))")
	(title "stop-server []"))

([ProServer_Class80012] of  CloVar

	(source "(chan)")
	(title "EVT-CHN"))

([ProServer_Class80013] of  CloVar

	(source "4444")
	(title "PORT"))

([ProServer_Class80014] of  CloVar

	(source "nil")
	(title "APP"))

([ProServer_Class80015] of  CloVar

	(source "nil")
	(title "SERV"))

([ProServer_Class80016] of  CloNamespace

	(source "(:use protege.core)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [clojure.core.async :as async :refer [chan alts!! put! <! <!! go timeout]]\n              [boat.mov :as bm]\n              [cesium.core :as cz]\n              [rete.core :as rete])\n(:import java.io.ByteArrayOutputStream)")
	(title "pro.server"))

([ProServer_Class80017] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (pump-out EVT-CHN)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "events []"))

([ProServer_Class80018] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([ProServer_Class80019] of  CloFunction

	(source "(put! EVT-CHN val)")
	(title "pump-in-evt [val]"))

([ProServer_Class90000] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([ProServer_Class90001] of  CloFunction

	(source "(let [ans (deref (future (<!! ANS-CHN)))]\n  ;;(println [:ANSWER ans])\n  (-> (r/response (write-transit ans))\n        (r/header \"Access-Control-Allow-Origin\" \"*\")))")
	(title "answer []"))

([ProServer_Class90002] of  CloVar

	(source "(chan)")
	(title "ANS-CHN"))

([ProServer_Class90003] of  CloFunction

	(source "(put! ANS-CHN val)")
	(title "pump-in-ans [val]"))

([ProServer_Class90005] of  CloFunction

	(source "(condp = sector\n  1   \"AHEAD\"\n  2   \"STAR-BOW\"\n  3   \"STAR-BEAM\"\n  4   \"STAR-BEAM\"\n  5   \"STAR-ABAFT\"\n  6   \"ASTERN\"\n  7   \"ASTERN\"\n  8   \"PORT-ABAFT\"\n  9   \"PORT-BEAM\"\n  10 \"PORT-BEAM\"\n  11 \"PORT-BOW\"\n  12 \"AHEAD\")")
	(title "side [sector]"))

([ProServer_Class90006] of  Rule

	(lhs "?od (OSMData coord ?crd1\n	radius ?rad\n	volume ?vol \n	time ?tim1)\n(Question coord ?crd2\n	time ?tim2\n	((> ?tim2 ?tim1)\n	 [(= ?vol 0)\n	  ((vector? ?crd1)\n                           (vector? ?crd2) \n 	   (osm.data/obsolete ?crd1 ?crd2))]))")
	(rhs "(let [osm (osm.data/get-osm-data ?crd2 ?rad)\n       cnt (count osm)]\n  (println [:OSM-DATA cnt ?crd2 ?rad])\n  (modify ?od coord ?crd2\n	volume cnt \n	time (as/current-time)))")
	(salience 2)
	(title "as:CheckOSMData"))

([ProServer_Class90007] of  CloProgram

	(cloFunctions
		[ProServer_Class190000]
		[ProServer_Class100011]
		[ProServer_Class170000]
		[ProServer_Class200018]
		[ProServer_Class290001]
		[ProServer_Class250001]
		[ProServer_Class310000]
		[ProServer_Class300000]
		[ProServer_Class220001]
		[ProServer_Class320003]
		[ProServer_Class340005]
		[ProServer_Class220004]
		[ProServer_Class320007]
		[ProServer_Class240014]
		[ProServer_Class330000]
		[ProServer_Class320005]
		[ProServer_Class330001])
	(cloNamespace [ProServer_Class100008])
	(cloVars
		[ProServer_Class240006]
		[ProServer_Class350000])
	(title "Advisor Skipper"))

([ProServer_Class90012] of  Rule

	(lhs "?ni (NearbyIslands time ?tim1)\n(Question coord ?bco\n	course ?crs)\n(OSMData volume ?vol \n	time ?tim2\n	((> ?vol 0)\n	 (vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [ii (osm.data/filter-kv \"place\" \"island\" @osm.data/DATA)\n       nn (map #(or (get % \"name\") \"unk\") ii)]\n  (modify ?ni list (vec nn)\n	time ?tim2)\n  (doseq [i ii]\n    (let [ico [(get i \"lat\") (get i \"lon\")]\n           bea (geo.calc/bear-deg ?bco ico)\n           dis (geo.calc/distance-nm ?bco ico)\n           sec (geo.calc/sector bea ?crs)\n           sid (geo.calc/side sec)]\n      (asser Island title (get i \"name\")\n	coord ico\n	polar [bea dis]\n	sector sec\n	side sid\n	time ?tim2))))")
	(salience 1)
	(title "as:AssertNearbyIslands"))

([ProServer_Class90013] of  CloFunction

	(source "(let [d (/ rad 60)\n       bbx [(- lon d) (- lat d) (+ lon d) (+ lat d)]]\n  (vreset! DATA (osm-data bbx)))")
	(title "get-osm-data [[lat lon] rad]"))
